1- Go emphasizes ease programming, if you use short declaration operator, u do not need to specify the type.
2- Bit is an abbrev of Binary digit.
3- most popular encoding technique is UTF-8.
4- 7 billion processors can be found in todays comps.
5- The ENIAC has 16,000 circuits or states.
7- if you declare int var then the compiler will choose whther u have used int32 or int 64. Implementation specific types.
8- A string in Go is a sequence of bytes also called slice of bytes.
9- Go source code is always UTF-8.
10- A string is also a sequence of bytes that represents unicode code points called runes.
11- A coding scheme is basically the sequence of on/off states that represent a certain operation or function in a comp.
12- There's no usage of While in Go.
13- EBNF extended Backus-Naur Form for syntax speciying in langs.
14- If we want to put 2 stmnts in a single line we can put semi colons otherwise the compiler puts ;s for us when stmnts are written in separate lines.
15- If we write an initialization stsmnt in an if clause the scope of the var declared there remians within the if block only.
16- A missing switch expression is by default taken as bool value true.
17- Array lenghts are included in array type, i.e two arrays holding values of same data type can be different if they are of diff. lengths.
18- A slice is built on top of an array, hence when we dynamically increase the length of an array a new array is built 
    discarding the old array which takes processing power so for fixed length arrays we can use 'make' function.
19- maps are unordered list.
20- Struct is a composite data type, complex data type and aggregate data type.
21- The inner type gets upgraded to the outer type in embedded struct types.
22- In golang we can swap vars by x, y = y, x.
23- In go u can't have an unused var, it throws an err.
24- If we dont add the fields while initilizing a var of a struct type then the valued passes are added to the fields in the sequence in which they are present in the struct type declaration.
25- Go, is both OOP lang and not. It has types and methods and allows an OOP style, there is no type hierarhcy, also check the go.dev FAQs
26- Go is object oriented, since it has :- 
        1. Encapsulation
                a. state("fields")
                b. behaviour("methods")
                c. exported & imported: viewable & not viewable
        2. Reusability 
                a. inheritance("embedded types")
        3. Polymorphism
                a. interface
        4. Overrdidng
                a. "promotion"

27- In Traditional OOP
        1. Clases
                a. data structure describing a type of object
                b. u create "instances/objects" from the class/blueprint.
                c. classes hold both"
                    i. state/data/fields
                    ii. behaviour/methods
                d. public/private
        2. inheritance

28- In Go:
        1. you dont create classes, rather TYPE
        2. you dont instantiate, you create a VALUE OF A TYPE
        3. you can create user defined types. and declare vars and consts.
29- ALIASING TYPES IS A BAD PRACTICE IN GO.
30- One should follow architectural alignment in GO, lay the fields from largest to smallest e.g.:- int64, float32, bool but go for readability first.
31- When u call a funcn you add arguments and when you define a func u add params.
32- Everything in Go is PASS BY VALUE.
33- A variadic param has to be the final param in a func declaration or anywhere.
34- when you pass a series of ints as variadic params a slice of int is created but the pointer do not point any underlying array as they generally should, and the value passed in nil.
35- The defer function is used to close a program ot innvokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.
36- Basically defer func executes when the func containing it exits.
37- A value can be of more than one type.
38- There exists a variadic param of empty interfaces, since each value has an underlying type of empty interfaces.
39- Every type atleast has zero methods, it may have 1,2,3.. methods but also has 0 methods
40- In go funcs are first class citizen, it can be used as var or can do anything any other type can do.
41- We can assign a function to a variable.
42- We can return a func type from a func and assign that returned func to a var and then execute that var as a func.
43- "& and *" are two operators '&' gives the address of a value and '*' value stored at an address
44- Methods set are the methods attached to a certain type.
45- A method declared with non-pointer receiver can receive both pointer and non-pointer values, but pointer receivers can only receive pointer values.
46- Any type with the method write(like a file) associated to it is of type "writer" which is an interface. and that with method read is a type reader.
47- In 2007 Intel released it's first dual core CPU, and google started working on Golang to take advantage of the dual core CPU and develop parallelism.
and hence go is the first major programming lang to have been written to natively take advantage of multiple cores programming.
48- Unlike other programming langs Golang has concurrency in-built in the design making it easy to implement concurrency using Go.
49- The difference between concurrency and parallelism, parallelism is the execution of more than one instructions in the multiple cores of a CPU, while concurrency is a code design pattern which allows to write code that has potential instructions that run in parallel.
50- concurrency does not guarantee parallelism, having multiple core CPU does.
51- Any go func or go method can be executed in it's own go routine by adding the `go` keyword before calling the func or method.
52- The method set of an interface type is it's interface.
53- The method set of a type determines the interface that the type implements and the methods that can be called using a receiver of that type.
54- One can use the `runtime.GoMaxProcs` to define the mnax. no. of CPUs that the goroutines can use.
55- Channels do block..
56- we can specify a buffer channel, which allows some specific values to sit in the channel. basically we create a room for data or anything passed into it. 
57- declaration of a send only channel is `identifier := make(chan <- type, buffer_val)` and that of a receive only channel is `identifier := make(<- chan type, buffer_val)`
58- Read your channel type from left to right.
59- You cannot assign a specific type of channel to a general channel
60- However you can assign a general channel to a specific channel byt the channel type doesn't change.
61- There are difft types of concurrent designs, fan in and fan outer
62- you can use := instead of = when u r using 2 vars of which
one is repeated and one is new but can't be done with blank identifier'_'
63- The process of using context is to stop leaking of go routines, 
64- There are a couple difft ways to print out the err message:-
        - fmt.Println()
        - log.Println()
        - log.Fatalln()
                # os.Exit
        - log.Panicln()
                # deferred func run
                # can use "recover"
        - panic()
65- Println formats using the default formats for its operands and writes to the standard output.
66- When os.Exit() is called, the deferred func dont run.
67- Preffered way of err logging is to use log package.
68- when panic() is called all the deferred stmts run in LIFO order.
69- having lowercase chars as initials in vars means that they won't be exported.
70- go doc is a command to see documentation
71- If we do not pass any arg to the go doc command it provides dov for the package on the current working directory.
72- godoc when used with the -http flag creates a local replica of the golang docs website.
73- godoc with the -src flag gives the source code for that pkg or method
74- Golang tests must : 
        - be in a file that ends with "_test.go"
        - put the file in the same package as the one being tested
        - be in a func with a signature "func TestX(*testing.T)"

75- Run a golang tested
        - go test
76- Deal with test failure
        - Use the error, fail or related methods to signal failure.
77- The expected and got idiom is very good practice to use while testing.
78- gofmt - formats go code
        - govet - reports suspicious constructs
        - golint - reports poor coding style
79- Benchmarking allows u to measure the performance of a code.
80- go test -cover is used to see analyse the test coverage of the code.
81- go test -coverprofile c.out will add the test coverage details to the c.out file
82- The go tool cover -html=c.out can be used to see the test coverage details in html format.
NOTE ** Its good to learn a lang on your own by going through the docs through the cmd using --help flag** 
83- len(slice) returns the no.of elements in that slice, but len(string) returns the no.of bytes in that string.
84- Arithmetic operators apply to numeric values and yield a result of the same type as the first operand.



